<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Glitzersachen.de (tech topic)</title><link>http://www.glitzersachen.de</link><description></description><language>en</language><lastBuildDate>Sun, 22 Jun 2014 18:06:14 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Type Tagging in C++</title><link>http://www.glitzersachen.de/posts/techtipps/type-tagging-in-cxx.html</link><dc:creator>M E Leypold</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;Type tagging&lt;/em&gt; wraps invocation arguments in objects of a different type to select a
different instance of an overloaded construct and thus a different processing policy for
the argument. This can be done at no cost at runtime and with a reasonably nice syntax. I'll show use cases and demonstrate a sample implementation.&lt;/p&gt;
&lt;p class="more"&gt;&lt;a href="http://www.glitzersachen.de/posts/techtipps/type-tagging-in-cxx.html"&gt;Read moreâ€¦&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>c++</category><category>disposable</category><category>tech topic</category><category>type tagging</category><guid>http://www.glitzersachen.de/posts/techtipps/type-tagging-in-cxx.html</guid><pubDate>Fri, 09 May 2014 00:01:41 GMT</pubDate></item></channel></rss>