<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Glitzersachen.de (make)</title><link>http://www.glitzersachen.de</link><description></description><atom:link href="http://www.glitzersachen.de/categories/make.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 03 Mar 2014 14:26:35 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Better deactivate the Linking Rule %: %.o in Makefiles</title><link>http://www.glitzersachen.de/posts/techtipps/make-deactivate-object-to-exe-rule.html</link><description>&lt;div&gt;&lt;h3&gt;Tip: Deactivate the Linking Rule %: %.o&lt;/h3&gt;
&lt;p&gt;Make has built-in rules to translate from C and C++ source to object files, to link object
files to executables, but also a rule to compile from C and C++ source directly into an
executable:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;%.o: %.c:  $(CC)  -c $(CPPFLAGS) $(CFLAGS)&lt;/span&gt;
&lt;span class="c"&gt;%.o: %.cc: $(CXX) -c $(CPPFLAGS) $(CXXFLAGS)&lt;/span&gt;
&lt;span class="c"&gt;%:   %.o:  $(CC) $(LDFLAGS) N.o $(LOADLIBES) $(LDLIBS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(This is what the &lt;em&gt;Gnu Make Manual&lt;/em&gt; documents). In more complex makefiles it's not always
evident, which path of translation will be chosen. It might be either of&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With C source this is not a problem, but with C++ it is: One &lt;a href="http://www.parashift.com/c++-faq/overview-mixing-langs.html"&gt;should not use the C
compiler to link C++ programs&lt;/a&gt;. There is more than one way to fix this
problem, but I recommend (for reasons given below) to deactivate the built-in &lt;em&gt;'%: %.o'&lt;/em&gt;
rule, like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;%.o: %: # deactivate built-in rule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Explanations&lt;/h3&gt;
&lt;h4&gt;The Problem&lt;/h4&gt;
&lt;h5&gt;What happened to me&lt;/h5&gt;
&lt;p&gt;Empirically what I found, was the following. I had one (only one!) C++ source file in a
directory. When calling make without a makefile, what I got was direct translation from
source to executable (using &lt;em&gt;c++&lt;/em&gt; or &lt;em&gt;g++&lt;/em&gt; as compiler).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When using a make file that &lt;em&gt;did not override&lt;/em&gt; those rules, I got&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The linking was done with &lt;em&gt;cc&lt;/em&gt; which gives errors since &lt;em&gt;libstdc++&lt;/em&gt; will not be linked in.
To me it was (and is) not obvious why the other translation path was chosen in the latter
case. I might had to do with the fact, that explicit dependencies (in this case: &lt;em&gt;foo.o:
foo.c&lt;/em&gt;) were give in the Makefile. I didn't bother to find out the exact reason for the
observed behaviour. At the moment it is sufficient, that the reason is &lt;em&gt;not obvious&lt;/em&gt; to
make it into something that needs fixing. Behaviour with non obvious causes is a
maintenance nightmare ...&lt;/p&gt;
&lt;h5&gt;The Symptoms&lt;/h5&gt;
&lt;p&gt;Errors like the following occur, when linking with &lt;em&gt;cc&lt;/em&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;h1.o&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="nx"&gt;function&lt;/span&gt; &lt;span class="sb"&gt;`Needle::populate(int)':&lt;/span&gt;
&lt;span class="sb"&gt;h1.cc:(.text+0x33): undefined reference to `&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsigned&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="s1"&gt;h1.o: In function `Needle::push(Disk*)'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;h1.cc&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0xcf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;undefined&lt;/span&gt; &lt;span class="nb"&gt;reference&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="sb"&gt;`std::cerr'&lt;/span&gt;
&lt;span class="sb"&gt;h1.cc:(.text+0xd4): undefined reference to `&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;basic_ostream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;char_traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;char_traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;basic_ostream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;char_traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="nx"&gt;const&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... and so on (mostly I'm quoting them here for the search engine to find). This is, of
course, because &lt;em&gt;cc&lt;/em&gt; does not link in the standard C++ library, so there is none of the
runtime available. One could try to specify the C++ runtime library in the libraries list
(this works in my case), but the problem with that approach is that &lt;em&gt;only&lt;/em&gt; the C++
compiler will know best, which libraries to pick up for a proper C++ runtime environment.
Next time or some time in the future - with another compiler version - it might be another
additional library missing... - e.g. nobody and nothing guarantees AFIACS that &lt;em&gt;libstdc++&lt;/em&gt;
also contains the compiler runtime support procedures.&lt;/p&gt;
&lt;p&gt;So - one is supposed to leave the linking of C++ programs to the C++ compiler and not to
the C compiler (and not to ld either). Regarding this, I find
&lt;a href="http://www.parashift.com/c++-faq/overview-mixing-langs.html"&gt;the C++ FAQ on my side&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Removing the Built-in Rule&lt;/h5&gt;
&lt;p&gt;Removing the built-in rule with&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;%: %.o: # deactivate built-in rule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;has the following advantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It removes the ambiguity mentioned above regarding the canonical translation path. The
  ambiguity is a nuisance anyway and difficult to recognize if a user has only superficial
  knowledge about make.  &lt;/li&gt;
&lt;li&gt;It makes linking dependent on a language specific rule.&lt;/li&gt;
&lt;li&gt;And of course it fixes the problem under consideration by using the C++ compiler to
  link.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;A (small) Disadvantage&lt;/h5&gt;
&lt;p&gt;There is also a small disadvantage of the proposed solution: You will never see an object
file corresponding to the main module of your program. Even if you create one explicitly,
e.g. for testing purposes with&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"-O0 -g"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it won't be used when building &lt;em&gt;foo&lt;/em&gt;. If you need this, I suggest to introduce
a new suffix for object files stemming from C++ sources:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;%.oo: %.cc: ; ... rule to translate from C++ source to object files ...&lt;/span&gt;
&lt;span class="c"&gt;%: %.oo:    ; ... rule to link C++ programs ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and also deactivate the built-in rule that allows to create object files with &lt;em&gt;.o&lt;/em&gt;-ending
from C++ source.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;%.o: %.cc: # deactivate built-in rule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Other File Suffices&lt;/h4&gt;
&lt;p&gt;Note that &lt;em&gt;make&lt;/em&gt; also supports &lt;em&gt;cpp&lt;/em&gt; as suffix for C++ source files. If you have file
ending in &lt;em&gt;cpp&lt;/em&gt; in your project, you might have to substitute &lt;em&gt;.cc&lt;/em&gt; by &lt;em&gt;.cpp&lt;/em&gt; or duplicate
the rules with &lt;em&gt;.cpp&lt;/em&gt; instead of &lt;em&gt;.cc&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Alternative Solutions&lt;/h4&gt;
&lt;p&gt;Here are some other fixes for the same problem that in my opinion do not work as well:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LOADLIBES=-lstdc++&lt;/strong&gt;: One could just add &lt;em&gt;LOADLIBES=-lstdc++&lt;/em&gt; to the make arguments or
  in the make file and the program would be linked properly. &lt;em&gt;Disadvantage&lt;/em&gt;: As explained
  above, the list of libraries to add might change with the compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CC=c++&lt;/strong&gt;: One could try to set &lt;em&gt;CC=c++&lt;/em&gt;, thus linking C programs with the C++
  compiler. This should work with most tool chains. &lt;em&gt;Disadvantage&lt;/em&gt;: You might want to link
  C++ and C code differently (to be specified as &lt;em&gt;CXXFLAGS&lt;/em&gt; and &lt;em&gt;CFLAGS&lt;/em&gt;). And it doesn't
  resolve the ambiguity regarding the translation path. Personally I'm bothered by
  indeterministic build processes, but YMMV.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;I've resisted the temptation to title this post &lt;em&gt;'%: %.o' considered harmful&lt;/em&gt;. There are -
IMHO - to much opinion pieces floating around in the Internet which are titled like
&lt;em&gt;Something considered harmful&lt;/em&gt; without any sufficient reason or depth of thought.&lt;/p&gt;
&lt;p&gt;Which brings me to recognition of the fact that the insight in this post is mostly
trivial: The post is too long for this and has taken me entirely too much time to write up
(while my cat has been harassing me). I can already anticipate that this text will not
make it in the printed volume &lt;em&gt;Best of Glitzersachen&lt;/em&gt; ;-).&lt;/p&gt;
&lt;!-- Local Variables: --&gt;

&lt;!-- mode: markdown --&gt;

&lt;!-- End: --&gt;

&lt;!--  LocalWords:  YMMV behaviour Glitzersachen
 --&gt;&lt;/div&gt;</description><category>blog</category><category>techtip</category><category>make</category><category>en</category><guid>http://www.glitzersachen.de/posts/techtipps/make-deactivate-object-to-exe-rule.html</guid><pubDate>Wed, 04 Sep 2013 12:00:00 GMT</pubDate></item></channel></rss>