<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Glitzersachen.de</title>
  <subtitle type="text">About things I find glittering at the roadside</subtitle>

  <updated>2014-03-02T21:39:03Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://www.glitzersachen.de//blog" />
  <id>http://www.glitzersachen.de//blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://www.glitzersachen.de//blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://www.glitzersachen.de//blog</uri>
    </author>
    <title type="html"><![CDATA[Better deactivate the Linking Rule %: %.o in Makefiles]]></title>
    <link rel="alternate" type="text/html" href="http://www.glitzersachen.de/blog/2013/09/04/better-deactivate-the-linking-rule-:-o-in-makefiles" />
    <id>http://www.glitzersachen.de/blog/2013/09/04/better-deactivate-the-linking-rule-:-o-in-makefiles</id>
    <updated>2013-09-04T12:00:00Z</updated>
    <published>2013-09-04T12:00:00Z</published>
    <category scheme="http://www.glitzersachen.de//blog" term="blog" />
    <category scheme="http://www.glitzersachen.de//blog" term="techtip" />
    <category scheme="http://www.glitzersachen.de//blog" term="make" />
    <category scheme="http://www.glitzersachen.de//blog" term="en" />
    <summary type="html"><![CDATA[Better deactivate the Linking Rule %: %.o in Makefiles]]></summary>
    <content type="html" xml:base="http://www.glitzersachen.de/blog/2013/09/04/better-deactivate-the-linking-rule-:-o-in-makefiles"><![CDATA[<h3 id="tip-deactivate-the-linking-rule-o">Tip: Deactivate the Linking Rule %: %.o</h3>
<p>Make has built-in rules to translate from C and C++ source to object files, to link object
files to executables, but also a rule to compile from C and C++ source directly into an
executable:</p>
<pre><code>%.o: %.c:  $(CC)  -c $(CPPFLAGS) $(CFLAGS)
%.o: %.cc: $(CXX) -c $(CPPFLAGS) $(CXXFLAGS)
%:   %.o:  $(CC) $(LDFLAGS) N.o $(LOADLIBES) $(LDLIBS)
</code></pre>
<p>(This is what the <em>Gnu Make Manual</em> documents). In more complex makefiles it's not always
evident, which path of translation will be chosen. It might be either of</p>
<pre><code>foo.cc --&gt; foo.o --&gt; foo
foo.cc --&gt; foo
</code></pre>
<p>With C source this is not a problem, but with C++ it is: One <a href="http://www.parashift.com/c++-faq/overview-mixing-langs.html">should not use the C
compiler to link C++ programs</a>. There is more than one way to fix this
problem, but I recommend (for reasons given below) to deactivate the built-in <em>'%: %.o'</em>
rule, like this:</p>
<pre><code>%.o: %: # deactivate built-in rule
</code></pre>
<h3 id="explanations">Explanations</h3>
<h4 id="the-problem">The Problem</h4>
<h5 id="what-happened-to-me">What happened to me</h5>
<p>Empirically what I found, was the following. I had one (only one!) C++ source file in a
directory. When calling make without a makefile, what I got was direct translation from
source to executable (using <em>c++</em> or <em>g++</em> as compiler).</p>
<pre><code>foo.cc --&gt; foo
</code></pre>
<p>When using a make file that <em>did not override</em> those rules, I got</p>
<pre><code>foo.cc --&gt; foo.o --&gt; foo
</code></pre>
<p>The linking was done with <em>cc</em> which gives errors since <em>libstdc++</em> will not be linked in.
To me it was (and is) not obvious why the other translation path was chosen in the latter
case. I might had to do with the fact, that explicit dependencies (in this case: <em>foo.o:
foo.c</em>) were give in the Makefile. I didn't bother to find out the exact reason for the
observed behaviour. At the moment it is sufficient, that the reason is <em>not obvious</em> to
make it into something that needs fixing. Behaviour with non obvious causes is a
maintenance nightmare ...</p>
<h5 id="the-symptoms">The Symptoms</h5>
<p>Errors like the following occur, when linking with <em>cc</em>:</p>
<pre><code>h1.o: In function `Needle::populate(int)':
h1.cc:(.text+0x33): undefined reference to `operator new(unsigned int)'
h1.o: In function `Needle::push(Disk*)':
h1.cc:(.text+0xcf): undefined reference to `std::cerr'
h1.cc:(.text+0xd4): undefined reference to `std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)'
</code></pre>
<p>... and so on (mostly I'm quoting them here for the search engine to find). This is, of
course, because <em>cc</em> does not link in the standard C++ library, so there is none of the
runtime available. One could try to specify the C++ runtime library in the libraries list
(this works in my case), but the problem with that approach is that <em>only</em> the C++
compiler will know best, which libraries to pick up for a proper C++ runtime environment.
Next time or some time in the future - with another compiler version - it might be another
additional library missing... - e.g. nobody and nothing guarantees AFIACS that <em>libstdc++</em>
also contains the compiler runtime support procedures.</p>
<p>So - one is supposed to leave the linking of C++ programs to the C++ compiler and not to
the C compiler (and not to ld either). Regarding this, I find
<a href="http://www.parashift.com/c++-faq/overview-mixing-langs.html">the C++ FAQ on my side</a>.</p>
<h5 id="removing-the-built-in-rule">Removing the Built-in Rule</h5>
<p>Removing the built-in rule with</p>
<pre><code>%: %.o: # deactivate built-in rule
</code></pre>
<p>has the following advantages:</p>
<ul>
<li>It removes the ambiguity mentioned above regarding the canonical translation path. The
  ambiguity is a nuisance anyway and difficult to recognize if a user has only superficial
  knowledge about make.<br />
</li>
<li>It makes linking dependent on a language specific rule.</li>
<li>And of course it fixes the problem under consideration by using the C++ compiler to
  link.</li>
</ul>
<h5 id="a-small-disadvantage">A (small) Disadvantage</h5>
<p>There is also a small disadvantage of the proposed solution: You will never see an object
file corresponding to the main module of your program. Even if you create one explicitly,
e.g. for testing purposes with</p>
<pre><code>make foo.o CXXFLAGS='-O0 -g'
</code></pre>
<p>it won't be used when building <em>foo</em>. If you need this, I suggest to introduce
a new suffix for object files stemming from C++ sources:</p>
<pre><code>%.oo: %.cc: ; ... rule to translate from C++ source to object files ...
%: %.oo:    ; ... rule to link C++ programs ...
</code></pre>
<p>and also deactivate the built-in rule that allows to create object files with <em>.o</em>-ending
from C++ source.</p>
<pre><code>%.o: %.cc: # deactivate built-in rule
</code></pre>
<h4 id="other-file-suffices">Other File Suffices</h4>
<p>Note that <em>make</em> also supports <em>cpp</em> as suffix for C++ source files. If you have file
ending in <em>cpp</em> in your project, you might have to substitute <em>.cc</em> by <em>.cpp</em> or duplicate
the rules with <em>.cpp</em> instead of <em>.cc</em>.</p>
<h4 id="alternative-solutions">Alternative Solutions</h4>
<p>Here are some other fixes for the same problem that in my opinion do not work as well:</p>
<ul>
<li>
<p><strong>LOADLIBES=-lstdc++</strong>: One could just add <em>LOADLIBES=-lstdc++</em> to the make arguments or
  in the make file and the program would be linked properly. <em>Disadvantage</em>: As explained
  above, the list of libraries to add might change with the compiler.</p>
</li>
<li>
<p><strong>CC=c++</strong>: One could try to set <em>CC=c++</em>, thus linking C programs with the C++
  compiler. This should work with most tool chains. <em>Disadvantage</em>: You might want to link
  C++ and C code differently (to be specified as <em>CXXFLAGS</em> and <em>CFLAGS</em>). And it doesn't
  resolve the ambiguity regarding the translation path. Personally I'm bothered by
  indeterministic build processes, but YMMV.</p>
</li>
</ul>
<h4 id="note">Note</h4>
<p>I've resisted the temptation to title this post <em>'%: %.o' considered harmful</em>. There are -
IMHO - to much opinion pieces floating around in the Internet which are titled like
<em>Something considered harmful</em> without any sufficient reason or depth of thought.</p>
<p>Which brings me to recognition of the fact that the insight in this post is mostly
trivial: The post is too long for this and has taken me entirely too much time to write up
(while my cat has been harassing me). I can already anticipate that this text will not
make it in the printed volume <em>Best of Glitzersachen</em> ;-).</p>
<!-- Local Variables: -->

<!-- mode: markdown -->

<!-- End: -->

<!--  LocalWords:  YMMV behaviour Glitzersachen
 -->]]></content>
  </entry>
</feed>
